#include <iostream>
#include <stdexcept>
#include <sstream>

using namespace std;

class DimensionMismatchException : public exception
{
private:
    string message;

public:
    DimensionMismatchException(size_t r1, size_t c1, size_t r2, size_t c2)
    {
        ostringstream oss;
        oss << "DimensionMismatchException (" << r1 << "x" << c1
            << " vs " << r2 << "x" << c2 << ")!";
        message = oss.str();
    }

    const char *what() const noexcept override
    {
        return message.c_str();
    }
};

template <typename T>
class Matrix
{
private:
    T **data;
    size_t rows, cols;

public:
    Matrix(size_t r, size_t c) : rows(r), cols(c)
    {
        data = new T *[rows];
        for (size_t i = 0; i < rows; ++i)
            data[i] = new T[cols](); // zero-initialize
    }

    ~Matrix()
    {
        for (size_t i = 0; i < rows; ++i)
            delete[] data[i];
        delete[] data;
    }

    void set(size_t r, size_t c, const T &value)
    {
        data[r][c] = value;
    }

    T get(size_t r, size_t c) const
    {
        return data[r][c];
    }

    size_t getRows() const { return rows; }
    size_t getCols() const { return cols; }

    Matrix<T> operator+(const Matrix<T> &other) const
    {
        if (rows != other.rows || cols != other.cols)
        {
            throw DimensionMismatchException(rows, cols, other.rows, other.cols);
        }

        Matrix<T> result(rows, cols);
        for (size_t i = 0; i < rows; ++i)
            for (size_t j = 0; j < cols; ++j)
                result.data[i][j] = data[i][j] + other.data[i][j];

        return result;
    }

    void print() const
    {
        for (size_t i = 0; i < rows; ++i)
        {
            for (size_t j = 0; j < cols; ++j)
                cout << data[i][j] << " ";
            cout << "\n";
        }
    }
};

int main()
{
    try
    {
        Matrix<int> A(2, 2);
        Matrix<int> B(3, 3); // Incompatible

        A.set(0, 0, 1);
        A.set(0, 1, 2);
        A.set(1, 0, 3);
        A.set(1, 1, 4);

        B.set(0, 0, 5);
        B.set(0, 1, 6);
        B.set(0, 2, 7);
        B.set(1, 0, 8);
        B.set(1, 1, 9);
        B.set(1, 2, 10);
        B.set(2, 0, 11);
        B.set(2, 1, 12);
        B.set(2, 2, 13);

        Matrix<int> C = A + B; // Should throw
        C.print();
    }
    catch (const DimensionMismatchException &e)
    {
        cout << e.what() << endl;
    }

    return 0;
}
