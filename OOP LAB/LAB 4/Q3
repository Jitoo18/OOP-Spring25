#include<iostream>
#include<string>

using namespace std;

class Car {

		string brand;
		string model;
		double rentalPrice;
		bool isAvailable;

	public:
		// default constructor
		Car() {
			brand = "unknown";
			model = "generic";
			rentalPrice = 0.0;
			isAvailable = true;
		}
		// parametric constructor
		Car(string Brand, string Model, double price, bool availability) {
			brand = Brand;
			model = Model;
			rentalPrice = price;
			isAvailable = availability;
		}

		Car(const Car& other) {
			brand = other.brand;
			model = other.model;
			rentalPrice = other.rentalPrice;
			isAvailable = other.isAvailable;
			cout<<"A new object is created as copy\n";
		}
		~Car() {
			cout<<"";
		}



		void update(const string& b, const string& m, double p ) {
			brand = b;
			model = m;
			rentalPrice = p;
		}

		bool availability() const {
			return isAvailable;
		}

		double applyDiscount (int days) {
			double discount = 0;
			if (days > 10) {
				discount = 0.1;
			} else if(days >=5 ) {
				discount = 0.05;
			}
			return rentalPrice * days * (1- discount);
		}

		void rentCar(int days) {
			if(isAvailable) {
				isAvailable = false;
				double finalPrice = applyDiscount(days);
				cout<<"The car is available for: "<<days<<" days"<< endl;
				cout<<"Total cost after discount = "<< finalPrice << endl;
			} else {
				cout<<"The car is rented\n";
			}
		}

		void returnCar() {
			isAvailable = true;
			cout<<"\nThe car is returned and available \n";
		}

		void details() const {
			cout<<"\nCar details.";
			cout<<"Brand: "<<brand<<endl;
			cout<<"Model: "<<model<<endl;
			cout<<"Rent Price: "<<rentalPrice<<endl;
			cout<<"Availability:  "<<(isAvailable ? "available":"rented")<<endl;
		}

};


int main() {

	Car a("Audi","A8",5000, true); // original object
	cout<<"Original car details: "<<endl;;
	a.details();

	Car b = a; // copying cars detail from a object to b
	cout<<"\nCopy car details: "<<endl;
	b.details();

	//modifying originnal object
	a.update("Audi","Q7",6000);
	cout<<"\nOriginal car details after updating: "<<endl;
	a.details();

	// checking copy constructor
	cout<<"\nCopied car details after updating original: "<<endl;
	b.details();


	return 0;
}
